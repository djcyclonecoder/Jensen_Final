// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Jensen_Final.Models;

namespace Jensen_Final.Data
{
    public partial class Jensen_DatabaseContext : DbContext
    {
        public Jensen_DatabaseContext()
        {
        }

        public Jensen_DatabaseContext(DbContextOptions<Jensen_DatabaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<DriverInfraction> DriverInfractions { get; set; }
        public virtual DbSet<DriverVehicle> DriverVehicles { get; set; }
        public virtual DbSet<DriversLicense> DriversLicenses { get; set; }
        public virtual DbSet<DriversWithOutstandingWarrant> DriversWithOutstandingWarrants { get; set; }
        public virtual DbSet<InfractionsMovingViolation> InfractionsMovingViolations { get; set; }
        public virtual DbSet<InfractionsNonMovingViolation> InfractionsNonMovingViolations { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Driver>(entity =>
            {
                entity.Property(e => e.DriverId)
                    .ValueGeneratedNever()
                    .HasColumnName("Driver_ID");

                entity.Property(e => e.DriversLicenseNumber)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("Drivers_License_Number");

                entity.Property(e => e.Ssn)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("SSN");
            });

            modelBuilder.Entity<DriverInfraction>(entity =>
            {
                entity.ToTable("Driver_Infractions");

                entity.Property(e => e.DriverInfractionId)
                    .ValueGeneratedNever()
                    .HasColumnName("Driver_Infraction_ID");

                entity.Property(e => e.DriverId).HasColumnName("Driver_ID");

                entity.Property(e => e.InfractionsMvId).HasColumnName("Infractions_MV_ID");

                entity.Property(e => e.InfractionsNmvId).HasColumnName("Infractions_NMV_ID");

                entity.Property(e => e.WarrantId).HasColumnName("Warrant_ID");
            });

            modelBuilder.Entity<DriverVehicle>(entity =>
            {
                entity.HasKey(e => e.DriverVehiclesId)
                    .HasName("PK__Driver_V__6987D5D4C64CDDB6");

                entity.ToTable("Driver_Vehicles");

                entity.Property(e => e.DriverVehiclesId)
                    .ValueGeneratedNever()
                    .HasColumnName("Driver_Vehicles_ID");

                entity.Property(e => e.DriverId).HasColumnName("Driver_ID");

                entity.Property(e => e.VehicleId).HasColumnName("Vehicle_ID");
            });

            modelBuilder.Entity<DriversLicense>(entity =>
            {
                entity.ToTable("Drivers_Licenses");

                entity.Property(e => e.DriversLicenseId)
                    .ValueGeneratedNever()
                    .HasColumnName("Drivers_License_ID");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Class)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateExpires)
                    .HasColumnType("date")
                    .HasColumnName("Date_Expires");

                entity.Property(e => e.DateIssued)
                    .HasColumnType("date")
                    .HasColumnName("Date_Issued");

                entity.Property(e => e.DateOfBirth)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_Birth");

                entity.Property(e => e.DonorIsChecked).HasColumnName("Donor_Is_Checked");

                entity.Property(e => e.DriversLicenseNumber)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("Drivers_License_Number");

                entity.Property(e => e.EyeColor)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Eye_Color");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Height)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.StreetAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Zip_Code");
            });

            modelBuilder.Entity<DriversWithOutstandingWarrant>(entity =>
            {
                entity.HasKey(e => e.WarrantId)
                    .HasName("PK__Drivers___301A1AB1BC39B23F");

                entity.ToTable("Drivers_With_Outstanding_Warrants");

                entity.Property(e => e.WarrantId)
                    .ValueGeneratedNever()
                    .HasColumnName("Warrant_ID");

                entity.Property(e => e.Charges)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateIssued)
                    .HasColumnType("date")
                    .HasColumnName("Date_Issued");

                entity.Property(e => e.DriverNameLastFirstMiddle)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Driver_Name_Last_First_Middle");

                entity.Property(e => e.LastKnownLocation)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Last_Known_Location");

                entity.Property(e => e.State)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Warrant_Type");
            });

            modelBuilder.Entity<InfractionsMovingViolation>(entity =>
            {
                entity.HasKey(e => e.InfractionsMvId)
                    .HasName("PK__Infracti__CB3FD34877DB74F8");

                entity.ToTable("Infractions_Moving_Violations");

                entity.Property(e => e.InfractionsMvId)
                    .ValueGeneratedNever()
                    .HasColumnName("Infractions_MV_ID");

                entity.Property(e => e.DateOfInfraction)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_Infraction");

                entity.Property(e => e.DescriptionOfIncident)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Description_of_Incident");

                entity.Property(e => e.DriversLicenseNumber)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("Drivers_License_Number");

                entity.Property(e => e.DwiIsChecked).HasColumnName("DWI_Is_Checked");

                entity.Property(e => e.RecklessDrivingIsChecked).HasColumnName("Reckless_Driving_Is_Checked");

                entity.Property(e => e.RunningStopSignOrTrafficLightIsChecked).HasColumnName("Running_Stop_Sign_or_Traffic_Light_Is_Checked");

                entity.Property(e => e.SeatbeltViolationIsChecked).HasColumnName("Seatbelt_Violation_Is_Checked");

                entity.Property(e => e.SecureLoadIsChecked).HasColumnName("Secure_Load_Is_Checked");

                entity.Property(e => e.SpeedingIsChecked).HasColumnName("Speeding_Is_Checked");

                entity.Property(e => e.VehicleLicensePlate)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Vehicle_License_Plate");
            });

            modelBuilder.Entity<InfractionsNonMovingViolation>(entity =>
            {
                entity.HasKey(e => e.InfractionsNmvId)
                    .HasName("PK__Infracti__CB3FD3481E0EE80F");

                entity.ToTable("Infractions_Non_Moving_Violations");

                entity.Property(e => e.InfractionsNmvId)
                    .ValueGeneratedNever()
                    .HasColumnName("Infractions_NMV_ID");

                entity.Property(e => e.BrokenTaillightIsChecked).HasColumnName("Broken_Taillight_Is_Checked");

                entity.Property(e => e.DateOfInfraction)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_Infraction");

                entity.Property(e => e.DescriptionOfIncident)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Description_of_Incident");

                entity.Property(e => e.DriversLicenseNumber)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("Drivers_License_Number");

                entity.Property(e => e.ExpiredRegistrationOrInsuranceIsChecked).HasColumnName("Expired_Registration_or_Insurance_Is_Checked");

                entity.Property(e => e.FireHydrantParkingIsChecked).HasColumnName("Fire_Hydrant_Parking_Is_Checked");

                entity.Property(e => e.LackOfRegistrationOrInsuranceIsChecked).HasColumnName("Lack_of_Registration_or_Insurance_Is_Checked");

                entity.Property(e => e.ParkingViolationIsChecked).HasColumnName("Parking_Violation_Is_Checked");

                entity.Property(e => e.VehicleLicensePlate)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Vehicle_License_Plate");

                entity.Property(e => e.VehicleMaintenanceIssueIsChecked).HasColumnName("Vehicle_Maintenance_Issue_Is_Checked");
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.Property(e => e.VehicleId)
                    .ValueGeneratedNever()
                    .HasColumnName("Vehicle_ID");

                entity.Property(e => e.LicensePlate)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("License_Plate");

                entity.Property(e => e.Make)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Model)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vin)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("VIN");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}